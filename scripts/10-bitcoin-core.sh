#!/usr/bin/env bash
set -Eeuo pipefail
cd "$(dirname "$0")/.."

. lib/common.sh
require_root; load_env; ensure_state_dir

# --- prompt fallback ---
if ! command -v prompt >/dev/null 2>&1; then
  prompt() {
    local q="$1"; local def="${2:-}"; local ans
    if [[ -n "$def" ]]; then read -rp "${q} [${def}]: " ans; printf '%s\n' "${ans:-$def}"
    else read -rp "${q}: " ans; printf '%s\n' "${ans}"; fi
  }
fi

# -----------------------------
# Defaults
# -----------------------------
: "${BITCOIN_VERSION:?}"                  # impostalo in .env
: "${BITCOIN_DATA_DIR:=/data/bitcoin}"
: "${BITCOIN_RPC_PORT:=8332}"
: "${ZMQ_RAWBLOCK:=28332}"
: "${ZMQ_RAWTX:=28333}"
: "${NETWORK:=mainnet}"                   # mainnet|testnet|signet|regtest

# -----------------------------
# Prune choice
# -----------------------------
if [[ -z "${USE_PRUNE:-}" ]]; then
  if confirm "Enable pruned mode for Bitcoin Core?"; then
    USE_PRUNE=true
    PRUNE_GB="$(prompt 'How many GB for pruned blocks?' '100')"
  else
    USE_PRUNE=false
    PRUNE_GB=""
  fi
fi
case "${USE_PRUNE,,}" in y|yes|true|1) USE_PRUNE=true;; *) USE_PRUNE=false;; esac
if [[ "${USE_PRUNE}" == "true" ]]; then
  [[ -z "${PRUNE_GB}" || ! "${PRUNE_GB}" =~ ^[0-9]+$ ]] && PRUNE_GB=100
  PRUNE_MIB="$(( PRUNE_GB * 1024 ))"
  (( PRUNE_MIB < 550 )) && PRUNE_MIB=550
fi

# -----------------------------
# User + dirs
# -----------------------------
ensure_user bitcoin
mkdir -p "${BITCOIN_DATA_DIR}" /etc/bitcoin
chown -R bitcoin:bitcoin "${BITCOIN_DATA_DIR}" /etc/bitcoin
chmod 750 "${BITCOIN_DATA_DIR}"

# -----------------------------
# Download & install
# -----------------------------
log "Downloading Bitcoin Core ${BITCOIN_VERSION}…"
URL="https://bitcoincore.org/bin/bitcoin-core-${BITCOIN_VERSION}/bitcoin-${BITCOIN_VERSION}-x86_64-linux-gnu.tar.gz"
curl -fSLO "$URL"
tar -xf "bitcoin-${BITCOIN_VERSION}-x86_64-linux-gnu.tar.gz"
install -m 0755 -o root -g root bitcoin-*/bin/* /usr/local/bin/
rm -rf "bitcoin-${BITCOIN_VERSION}-x86_64-linux-gnu.tar.gz" bitcoin-*

# -----------------------------
# bitcoin.conf (cookie auth)
# -----------------------------
log "Writing /etc/bitcoin/bitcoin.conf"
cat > /etc/bitcoin/bitcoin.conf <<CONF
# Generated by BTC Node Installer
server=1
daemon=0
datadir=${BITCOIN_DATA_DIR}
disablewallet=1
uacomment=BTC-Node-Installer

# Indexes
blockfilterindex=1
peerblockfilters=1
coinstatsindex=1

# Networking
listen=1
bind=127.0.0.1

# Tor/I2P (se lo abiliti da altro modulo, aggiungeremo le opzioni lì)
listenonion=1
proxy=127.0.0.1:9050
onion=127.0.0.1:9050
torcontrol=127.0.0.1:9051

# RPC (cookie)
rpcallowip=127.0.0.1
rpcport=${BITCOIN_RPC_PORT}

# ZMQ
zmqpubrawblock=tcp://127.0.0.1:${ZMQ_RAWBLOCK}
zmqpubrawtx=tcp://127.0.0.1:${ZMQ_RAWTX}

# Performance
dbcache=2048
blocksonly=1
CONF

case "${NETWORK}" in
  testnet) echo "testnet=1" >> /etc/bitcoin/bitcoin.conf ;;
  signet)  echo "signet=1"  >> /etc/bitcoin/bitcoin.conf ;;
  regtest) echo "regtest=1" >> /etc/bitcoin/bitcoin.conf ;;
  mainnet|"") : ;;
  *) warn "Unknown NETWORK='${NETWORK}', using mainnet." ;;
esac

if [[ "${USE_PRUNE}" == "true" ]]; then
  {
    echo "prune=${PRUNE_MIB}"
    echo "txindex=0"
  } >> /etc/bitcoin/bitcoin.conf
  warn "Pruned mode enabled (${PRUNE_MIB} MiB)."
else
  echo "txindex=1" >> /etc/bitcoin/bitcoin.conf
  ok "Full mode enabled (txindex=1)."
fi

chown -R bitcoin:bitcoin /etc/bitcoin

# -----------------------------
# Helper: grant cookie to group
# -----------------------------
cat > /usr/local/bin/btc-cookie-acl.sh <<'SH'
#!/bin/sh
set -eu
COOKIE="/data/bitcoin/.cookie"

# garantisci traversal dir (via ACL se disponibile, altrimenti permessi minimi)
if command -v setfacl >/dev/null 2>&1; then
  setfacl -m g:bitcoin:x /data 2>/dev/null || true
  setfacl -m g:bitcoin:x /data/bitcoin 2>/dev/null || true
else
  chmod g+x /data /data/bitcoin 2>/dev/null || true
fi

# attendi cookie e poi assegna lettura al gruppo bitcoin
for i in $(seq 1 60); do
  if [ -f "$COOKIE" ]; then
    chgrp bitcoin "$COOKIE" 2>/dev/null || true
    chmod 640 "$COOKIE" 2>/dev/null || true
    if command -v setfacl >/dev/null 2>&1; then
      setfacl -m g:bitcoin:r "$COOKIE" 2>/dev/null || true
    fi
    exit 0
  fi
  sleep 1
done
exit 1
SH
chmod +x /usr/local/bin/btc-cookie-acl.sh

# --- Allow lnd to read the RPC cookie (ACL helper) ---
# ensure setfacl is available
if ! command -v setfacl >/dev/null 2>&1; then
  apt-get update -y && apt-get install -y acl
fi

# helper script called by ExecStartPost (waits for cookie then applies ACLs)
install -m 0755 -o root -g root /dev/stdin /usr/local/bin/btc-cookie-acl.sh <<'SH'
#!/usr/bin/env bash
set -euo pipefail
COOKIE="/data/bitcoin/.cookie"
# wait up to 60s for cookie creation
for i in $(seq 1 60); do
  if [ -f "$COOKIE" ]; then
    # directory traverse + future inheritance
    setfacl -m u:lnd:rx /data/bitcoin || true
    setfacl -d -m u:lnd:rx /data/bitcoin || true
    # read permission on the cookie itself
    setfacl -m u:lnd:r "$COOKIE" || true
    exit 0
  fi
  sleep 1
done
exit 1
SH


# -----------------------------
# systemd unit
# -----------------------------
log "Installing systemd unit for bitcoind"
cat > /etc/systemd/system/bitcoind.service <<SERVICE
[Unit]
Description=Bitcoin daemon
After=network.target
Wants=network.target

[Service]
User=bitcoin
Group=bitcoin
Type=simple
ExecStart=/usr/local/bin/bitcoind -conf=/etc/bitcoin/bitcoin.conf -datadir=${BITCOIN_DATA_DIR} -daemon=0
ExecStop=/usr/local/bin/bitcoin-cli -conf=/etc/bitcoin/bitcoin.conf -datadir=${BITCOIN_DATA_DIR} stop
ExecStartPost=/usr/local/bin/btc-cookie-acl.sh
Restart=on-failure
TimeoutStopSec=120
RuntimeDirectory=bitcoind
RuntimeDirectoryMode=0750
LimitNOFILE=65535
PrivateTmp=true

[Install]
WantedBy=multi-user.target
SERVICE

enable_start bitcoind.service
ok "Bitcoin Core started. Test: sudo -u bitcoin bitcoin-cli -datadir=${BITCOIN_DATA_DIR} getblockchaininfo"
set_state bitcoin.installed

