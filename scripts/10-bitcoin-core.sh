#!/usr/bin/env bash
set -Eeuo pipefail
cd "$(dirname "$0")/.."

. lib/common.sh
require_root; load_env; ensure_state_dir

# --- helpers (fallback se mancassero in common.sh) ---
if ! command -v prompt >/dev/null 2>&1; then
  prompt() { local q="$1"; local def="${2:-}"; local ans; if [[ -n "$def" ]]; then read -rp "${q} [${def}]: " ans; printf '%s\n' "${ans:-$def}"; else read -rp "${q}: " ans; printf '%s\n' "$ans"; fi; }
fi

# ---------------------------------------
# Config (env + default sicuri)
# ---------------------------------------
: "${BITCOIN_VERSION:?Set BITCOIN_VERSION in .env}"
: "${BITCOIN_DATA_DIR:=/data/bitcoin}"
: "${BITCOIN_RPC_PORT:=8332}"
: "${ZMQ_RAWBLOCK:=28332}"
: "${ZMQ_RAWTX:=28333}"
: "${NETWORK:=mainnet}"   # mainnet|testnet|signet|regtest

# Prompt prune se non specificato
if [[ -z "${USE_PRUNE:-}" ]]; then
  if confirm "Enable pruned mode for Bitcoin Core?"; then
    USE_PRUNE=true
    PRUNE_GB="$(prompt "How many GB for pruned blocks?" "100")"
  else
    USE_PRUNE=false
    PRUNE_GB=""
  fi
fi

case "${USE_PRUNE,,}" in
  y|yes|true|1) USE_PRUNE=true ;; *) USE_PRUNE=false ;;
esac

if [[ "${USE_PRUNE}" == "true" ]]; then
  [[ -n "${PRUNE_GB:-}" && "${PRUNE_GB}" =~ ^[0-9]+$ ]] || PRUNE_GB=100
  PRUNE_MIB="$(( PRUNE_GB * 1024 ))"
  (( PRUNE_MIB >= 550 )) || PRUNE_MIB=550
else
  PRUNE_MIB=""
fi

# ---------------------------------------
# Utente + cartelle
# ---------------------------------------
ensure_user bitcoin
mkdir -p "${BITCOIN_DATA_DIR}" /etc/bitcoin
chown -R bitcoin:bitcoin "${BITCOIN_DATA_DIR}" /etc/bitcoin
chmod 750 "${BITCOIN_DATA_DIR}"

# ---------------------------------------
# Install Bitcoin Core
# ---------------------------------------
log "Downloading Bitcoin Core ${BITCOIN_VERSION}…"
TMPDIR="$(mktemp -d)"; trap 'rm -rf "$TMPDIR"' EXIT
pushd "$TMPDIR" >/dev/null
URL="https://bitcoincore.org/bin/bitcoin-core-${BITCOIN_VERSION}/bitcoin-${BITCOIN_VERSION}-x86_64-linux-gnu.tar.gz"
curl -fSLO "$URL"
tar -xf "bitcoin-${BITCOIN_VERSION}-x86_64-linux-gnu.tar.gz"
install -m 0755 -o root -g root bitcoin-*/bin/* /usr/local/bin/
popd >/dev/null

# ---------------------------------------
# bitcoin.conf (RPC cookie)
# ---------------------------------------
log "Writing /etc/bitcoin/bitcoin.conf"
mkdir -p /etc/bitcoin
cat > /etc/bitcoin/bitcoin.conf <<CONF
# Bitcoin Core configuration (generated by btc-node-installer)
server=1
daemon=0
datadir=${BITCOIN_DATA_DIR}
disablewallet=1
uacomment=BTC-Node-Installer

# Indexes
blockfilterindex=1
peerblockfilters=1
coinstatsindex=1

# Logging
# (no -debuglogfile=0 to avoid confusing warning)
# add debug= lines if you wish, e.g.:
# debug=tor
# debug=i2p

# Networking
listen=1
# If Tor/I2P module is enabled we'll append those settings below

# RPC
# Cookie auth only; allow localhost and bind to loopback
rpcallowip=127.0.0.1
rpcbind=127.0.0.1

# ZMQ
zmqpubrawblock=tcp://127.0.0.1:${ZMQ_RAWBLOCK}
zmqpubrawtx=tcp://127.0.0.1:${ZMQ_RAWTX}

# Performance
dbcache=2048
blocksonly=1
CONF

# Network selection (default mainnet)
case "${NETWORK}" in
  testnet)  echo "testnet=1"  >> /etc/bitcoin/bitcoin.conf ;;
  signet)   echo "signet=1"   >> /etc/bitcoin/bitcoin.conf ;;
  regtest)  echo "regtest=1"  >> /etc/bitcoin/bitcoin.conf ;;
  mainnet|"") : ;;
  *) warn "Unknown NETWORK='${NETWORK}', using mainnet defaults." ;;
esac

# Tor/I2P only if enabled previously
if has_state tor.enabled; then
  cat >> /etc/bitcoin/bitcoin.conf <<'CONF'
# Tor networking
bind=127.0.0.1
proxy=127.0.0.1:9050
onion=127.0.0.1:9050
listenonion=1
torcontrol=127.0.0.1:9051
# onlynet=onion    # uncomment to force Tor-only
CONF
  if has_state i2p.enabled; then
    echo "i2psam=127.0.0.1:7656" >> /etc/bitcoin/bitcoin.conf
  fi
fi

# Prune/full mode
if [[ "${USE_PRUNE}" == "true" ]]; then
  echo "prune=${PRUNE_MIB}" >> /etc/bitcoin/bitcoin.conf
  echo "txindex=0"          >> /etc/bitcoin/bitcoin.conf
  warn "Pruned mode enabled (${PRUNE_GB} GB ~ ${PRUNE_MIB} MiB). 'txindex=0' enforced."
else
  echo "txindex=1"          >> /etc/bitcoin/bitcoin.conf
  ok "Full node mode enabled ('txindex=1')."
fi

chown -R bitcoin:bitcoin /etc/bitcoin

# ---------------------------------------
# PostStart script: attende .cookie e dà ACL a lnd
# ---------------------------------------
if ! command -v setfacl >/dev/null 2>&1; then
  apt-get update -y && apt-get install -y acl
fi

install -m 0755 -o root -g root /dev/stdin /usr/local/sbin/bitcoind-poststart.sh <<SH
#!/usr/bin/env bash
set -euo pipefail
COOKIE="${BITCOIN_DATA_DIR}/.cookie"
for i in \$(seq 1 60); do
  if [ -f "\$COOKIE" ]; then
    setfacl -m u:lnd:r "\$COOKIE" || exit 1
    exit 0
  fi
  sleep 1
done
echo "[x] .cookie not found in 60s" >&2
exit 1
SH


# Ensure 'acl' exists, write cookie ACL helper
if ! command -v setfacl >/dev/null 2>&1; then
  apt-get update -y && apt-get install -y acl
fi

cat > /usr/local/bin/btc-cookie-acl.sh <<'SH'
#!/usr/bin/env bash
set -euo pipefail
COOKIE="/data/bitcoin/.cookie"
for i in $(seq 1 60); do
  if [ -f "$COOKIE" ]; then
    # keep ownership under bitcoin but allow lnd to read
    chown bitcoin:bitcoin "$COOKIE" || true
    if command -v setfacl >/devnull 2>&1; then
      setfacl -m u:lnd:r "$COOKIE" || true
    else
      chmod g+r "$COOKIE" || true
    fi
    exit 0
  fi
  sleep 1
done
exit 1
SH
chmod +x /usr/local/bin/btc-cookie-acl.sh


# ---------------------------------------
# systemd unit
# ---------------------------------------
log "Installing systemd unit for bitcoind"
cat > /etc/systemd/system/bitcoind.service <<'SERVICE'
[Unit]
Description=Bitcoin daemon
After=network.target
Wants=network.target

[Service]
User=bitcoin
Group=bitcoin
Type=simple
ExecStart=/usr/local/bin/bitcoind -conf=/etc/bitcoin/bitcoin.conf -datadir=/data/bitcoin -daemon=0
ExecStartPost=/usr/local/bin/btc-cookie-acl.sh
ExecStop=/usr/local/bin/bitcoin-cli -conf=/etc/bitcoin/bitcoin.conf -datadir=/data/bitcoin stop
Restart=on-failure
RestartSec=5
TimeoutStopSec=120
RuntimeDirectory=bitcoind
RuntimeDirectoryMode=0750
LimitNOFILE=65535
PrivateTmp=true

[Install]
WantedBy=multi-user.target
SERVICE

enable_start bitcoind.service
ok "Bitcoin Core started. Monitor with: bcli getblockchaininfo"
set_state bitcoin.installed

