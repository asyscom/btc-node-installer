#!/usr/bin/env bash
set -Eeuo pipefail
cd "$(dirname "$0")/.."

. lib/common.sh
require_root; load_env; ensure_state_dir
# --- compatibility prompt() if not provided by common.sh ---
if ! command -v prompt >/dev/null 2>&1; then
  prompt() {
    local q="$1"; local def="${2:-}"; local ans
    if [[ -n "$def" ]]; then
      read -rp "${q} [${def}]: " ans
      printf '%s\n' "${ans:-$def}"
    else
      read -rp "${q}: " ans
      printf '%s\n' "${ans}"
    fi
  }
fi

# ----------------------------------------------------------------------
# Safe defaults (avoid 'unbound variable' with set -u)
# ----------------------------------------------------------------------
: "${BITCOIN_VERSION:?}"                # must be provided (from .env)
: "${BITCOIN_DATA_DIR:=/data/bitcoin}"
: "${BITCOIN_RPC_USER:=btcuser}"
: "${BITCOIN_RPC_PASSWORD:=change-me}"
: "${BITCOIN_RPC_PORT:=8332}"
: "${ZMQ_RAWBLOCK:=28332}"
: "${ZMQ_RAWTX:=28333}"
: "${NETWORK:=mainnet}"                 # mainnet | testnet | signet | regtest

# Ask interactively for prune if not preset via env
if [[ -z "${USE_PRUNE:-}" ]]; then
  if confirm "Enable pruned mode for Bitcoin Core?"; then
    USE_PRUNE=true
    PRUNE_GB="$(prompt "How many GB do you want to allocate for pruned blocks?" "100")"
  else
    USE_PRUNE=false
    PRUNE_GB=""
  fi
fi

# Normalize boolean (in case it's set via env as YES/True/etc.)
case "${USE_PRUNE,,}" in
  y|yes|true|1) USE_PRUNE=true ;;
  *)            USE_PRUNE=false ;;
esac

# Compute PRUNE_MIB if pruning
if [[ "${USE_PRUNE}" == "true" ]]; then
  # sanitize PRUNE_GB (digits only)
  if [[ -z "${PRUNE_GB}" || ! "${PRUNE_GB}" =~ ^[0-9]+$ ]]; then
    warn "Invalid prune size; defaulting to 100 GB."
    PRUNE_GB=100
  fi
  PRUNE_MIB="$(( PRUNE_GB * 1024 ))"
  # enforce Bitcoin Core minimum (>= 550 MiB)
  if (( PRUNE_MIB < 550 )); then
    warn "Prune size too small; bumping to 550 MiB minimum."
    PRUNE_MIB=550
  fi
else
  PRUNE_MIB=""
fi

# Ensure data dir exists
mkdir -p "${BITCOIN_DATA_DIR}"
chown -R bitcoin:bitcoin "${BITCOIN_DATA_DIR}"
chmod 750 "${BITCOIN_DATA_DIR}"

if has_state bitcoin.installed; then
  if confirm "Bitcoin Core appears to be already installed. Re-run this installer anyway?"; then
    warn "Re-running Bitcoin Core installer as requested."
  else
    ok "Skipped Bitcoin Core (already installed)."
    exit 0
  fi
fi

# ----------------------------------------------------------------------
# Download & install Bitcoin Core
# ----------------------------------------------------------------------
log "Downloading Bitcoin Core ${BITCOIN_VERSION}..."
URL="https://bitcoincore.org/bin/bitcoin-core-${BITCOIN_VERSION}/bitcoin-${BITCOIN_VERSION}-x86_64-linux-gnu.tar.gz"
if ! curl -fSLO "$URL"; then
  error_exit "Failed to download Bitcoin Core ($URL). Check version/arch."
fi

tar -xvf "bitcoin-${BITCOIN_VERSION}-x86_64-linux-gnu.tar.gz"
install -m 0755 -o root -g root bitcoin-*/bin/* /usr/local/bin/
rm -rf "bitcoin-${BITCOIN_VERSION}-x86_64-linux-gnu.tar.gz" bitcoin-*

# ----------------------------------------------------------------------
# Write bitcoin.conf
# ----------------------------------------------------------------------
log "Writing /etc/bitcoin/bitcoin.conf"
mkdir -p /etc/bitcoin
cat > /etc/bitcoin/bitcoin.conf <<CONF
# Bitcoin Core configuration (generated by btc-node-installer)
server=1
daemon=0
datadir=${BITCOIN_DATA_DIR}
disablewallet=1
rpccookieperms=group
uacomment=BTC-Node-Installer
assumevalid=0

# Indexes
blockfilterindex=1
peerblockfilters=1
coinstatsindex=1

# Logging
debug=tor
debug=i2p
nodebuglogfile=0

# Networking
listen=1
CONF

# Network selection (default is mainnet)
case "${NETWORK}" in
  testnet)  echo "testnet=1"  >> /etc/bitcoin/bitcoin.conf ;;
  signet)   echo "signet=1"   >> /etc/bitcoin/bitcoin.conf ;;
  regtest)  echo "regtest=1"  >> /etc/bitcoin/bitcoin.conf ;;
  mainnet|"") : ;; # nothing
  *) warn "Unknown NETWORK='${NETWORK}', using mainnet defaults." ;;
esac

# Tor/I2P only if enabled previously
if has_state tor.enabled; then
  cat >> /etc/bitcoin/bitcoin.conf <<'CONF'
# Tor/I2P (enabled)
bind=127.0.0.1
proxy=127.0.0.1:9050
onion=127.0.0.1:9050
listenonion=1
# onlynet=onion    # uncomment if you want Tor-only
CONF
  if has_state i2p.enabled; then
    {
      echo "i2psam=127.0.0.1:7656"
      # echo "onlynet=i2p"  # uncomment if you want I2P-only as well
    } >> /etc/bitcoin/bitcoin.conf
  fi
else
  cat >> /etc/bitcoin/bitcoin.conf <<'CONF'
# Tor/I2P (disabled here). You can enable them later via the security module.
# bind=127.0.0.1
# proxy=127.0.0.1:9050
# onion=127.0.0.1:9050
# listenonion=1
# i2psam=127.0.0.1:7656
CONF
fi

# RPC & ZMQ
cat >> /etc/bitcoin/bitcoin.conf <<CONF
# RPC
rpcuser=${BITCOIN_RPC_USER}
rpcpassword=${BITCOIN_RPC_PASSWORD}
rpcallowip=127.0.0.1
rpcport=${BITCOIN_RPC_PORT}

# ZMQ
zmqpubrawblock=tcp://127.0.0.1:${ZMQ_RAWBLOCK}
zmqpubrawtx=tcp://127.0.0.1:${ZMQ_RAWTX}

# Performance
dbcache=2048
blocksonly=1
CONF

# Prune/full mode
if [[ "${USE_PRUNE}" == "true" ]]; then
  {
    echo "prune=${PRUNE_MIB}"
    echo "txindex=0"
  } >> /etc/bitcoin/bitcoin.conf
  warn "Pruned mode enabled (${PRUNE_GB} GB ~ ${PRUNE_MIB} MiB). 'txindex=0' enforced."
else
  echo "txindex=1" >> /etc/bitcoin/bitcoin.conf
  ok "Full node mode enabled ('txindex=1')."
fi

chown -R bitcoin:bitcoin /etc/bitcoin

# ----------------------------------------------------------------------
# systemd unit
# ----------------------------------------------------------------------
log "Installing systemd unit for bitcoind"
cat > /etc/systemd/system/bitcoind.service <<SERVICE
[Unit]
Description=Bitcoin daemon
After=network.target
Wants=network.target

[Service]
User=bitcoin
Group=bitcoin
Type=simple
ExecStart=/usr/local/bin/bitcoind -conf=/etc/bitcoin/bitcoin.conf -datadir=${BITCOIN_DATA_DIR} -daemon=0
ExecStop=/usr/local/bin/bitcoin-cli -conf=/etc/bitcoin/bitcoin.conf -datadir=${BITCOIN_DATA_DIR} stop
Restart=on-failure
TimeoutStopSec=120
RuntimeDirectory=bitcoind
RuntimeDirectoryMode=0750
LimitNOFILE=65535
PrivateTmp=true

[Install]
WantedBy=multi-user.target
SERVICE

enable_start bitcoind.service
ok "Bitcoin Core started. Monitor with: bcli getblockchaininfo"
set_state bitcoin.installed

